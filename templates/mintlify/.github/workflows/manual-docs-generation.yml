name: 📚 Multi-Audience Documentation Generator

# TRIGGER MANUALE - Non si attiva automaticamente
on:
  workflow_dispatch:
    inputs:
      audience:
        description: "Target audience per la documentazione"
        required: true
        type: choice
        options:
          - all # Genera tutte e 3 le documentazioni
          - developer # Solo documentazione tecnica
          - stakeholder # Solo documentazione business
          - customer # Solo documentazione utente
        default: "all"

      from_commit:
        description: "Commit di partenza (lascia vuoto per usare ultimo documentato)"
        required: false
        type: string

      to_commit:
        description: "Commit finale (lascia vuoto per HEAD)"
        required: false
        type: string
        default: "HEAD"

      force_regenerate:
        description: "Forza rigenerazione anche se non ci sono modifiche"
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-documentation:
    name: 🤖 Generate Documentation
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch completo per analisi commit
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Setup Node.js
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "scripts/package-lock.json"

      # 3. Installa dipendenze
      - name: 📦 Install Dependencies
        working-directory: ./scripts
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      # 4. Determina range di commit da analizzare
      - name: 🔍 Determine Commit Range
        id: commit_range
        run: |
          # File che traccia l'ultimo commit documentato
          TRACKING_FILE=".docs-tracking.json"

          # Commit finale (default HEAD)
          TO_COMMIT="${{ inputs.to_commit }}"
          if [ -z "$TO_COMMIT" ] || [ "$TO_COMMIT" = "HEAD" ]; then
            TO_COMMIT=$(git rev-parse HEAD)
          fi

          # Commit iniziale
          if [ -n "${{ inputs.from_commit }}" ]; then
            # Usato commit fornito dall'utente
            FROM_COMMIT="${{ inputs.from_commit }}"
            echo "📍 Using user-provided from_commit: $FROM_COMMIT"
          elif [ -f "$TRACKING_FILE" ]; then
            # Leggi ultimo commit documentato dal file
            FROM_COMMIT=$(jq -r '.last_documented_commit' $TRACKING_FILE)
            echo "📍 Using tracked commit: $FROM_COMMIT"
          else
            # Prima esecuzione, usa commit iniziale del repo
            FROM_COMMIT=$(git rev-list --max-parents=0 HEAD)
            echo "📍 First run, starting from initial commit: $FROM_COMMIT"
          fi

          # Conta i commit nel range
          COMMIT_COUNT=$(git rev-list --count ${FROM_COMMIT}..${TO_COMMIT})

          echo "from_commit=$FROM_COMMIT" >> $GITHUB_OUTPUT
          echo "to_commit=$TO_COMMIT" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT

          echo ""
          echo "📊 Commit Range Analysis:"
          echo "  From: $FROM_COMMIT"
          echo "  To:   $TO_COMMIT"
          echo "  Total commits: $COMMIT_COUNT"
          echo ""

      # 5. Ottieni lista commit e modifiche
      - name: 📋 Get Commit Details
        id: commits
        run: |
          FROM="${{ steps.commit_range.outputs.from_commit }}"
          TO="${{ steps.commit_range.outputs.to_commit }}"

          # Lista commit con messaggi
          echo "📝 Commit messages:"
          git log --pretty=format:"%h - %s (%an)" ${FROM}..${TO}

          # Salva commit messages in file
          git log --pretty=format:"%h|%s|%an|%ae|%ai" ${FROM}..${TO} > /tmp/commits.txt

          # File modificati in tutto il range
          FILES=$(git diff --name-only ${FROM}..${TO} | grep -v '^docs/' | tr '\n' ',' || true)
          echo "files_changed=$FILES" >> $GITHUB_OUTPUT

          # Statistiche
          STATS=$(git diff --shortstat ${FROM}..${TO})
          echo "stats=$STATS" >> $GITHUB_OUTPUT

          echo ""
          echo "📊 Changes Summary:"
          echo "$STATS"
          echo ""

      # 6. Check se ci sono modifiche da documentare
      - name: ✅ Check if Documentation Needed
        id: check_needed
        run: |
          COMMIT_COUNT=${{ steps.commit_range.outputs.commit_count }}
          FILES="${{ steps.commits.outputs.files_changed }}"
          FORCE="${{ inputs.force_regenerate }}"

          if [ "$FORCE" = "true" ]; then
            echo "needed=true" >> $GITHUB_OUTPUT
            echo "✅ Documentation forced by user"
          elif [ "$COMMIT_COUNT" -eq "0" ]; then
            echo "needed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No new commits since last documentation"
          elif [ -z "$FILES" ]; then
            echo "needed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No relevant files changed"
          else
            echo "needed=true" >> $GITHUB_OUTPUT
            echo "✅ Documentation needed: $COMMIT_COUNT commits with changes"
          fi

      # 7. Genera documentazione DEVELOPER
      - name: 👨‍💻 Generate Developer Documentation
        if: steps.check_needed.outputs.needed == 'true' && (inputs.audience == 'all' || inputs.audience == 'developer')
        working-directory: ./scripts
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          AUDIENCE: "developer"
          FROM_COMMIT: ${{ steps.commit_range.outputs.from_commit }}
          TO_COMMIT: ${{ steps.commit_range.outputs.to_commit }}
          DOCS_PATH: "../docs/developer"
          AI_MODEL: "openai/gpt-oss-20b:free"
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "📝 Generating DEVELOPER documentation..."
          npm run docs:generate

      # 8. Genera documentazione STAKEHOLDER
      - name: 💼 Generate Stakeholder Documentation
        if: steps.check_needed.outputs.needed == 'true' && (inputs.audience == 'all' || inputs.audience == 'stakeholder')
        working-directory: ./scripts
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          AUDIENCE: "stakeholder"
          FROM_COMMIT: ${{ steps.commit_range.outputs.from_commit }}
          TO_COMMIT: ${{ steps.commit_range.outputs.to_commit }}
          DOCS_PATH: "../docs/stakeholder"
          AI_MODEL: "openai/gpt-oss-20b:free"
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "📝 Generating STAKEHOLDER documentation..."
          npm run docs:generate

      # 9. Genera documentazione CUSTOMER
      - name: 👥 Generate Customer Documentation
        if: steps.check_needed.outputs.needed == 'true' && (inputs.audience == 'all' || inputs.audience == 'customer')
        working-directory: ./scripts
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          AUDIENCE: "customer"
          FROM_COMMIT: ${{ steps.commit_range.outputs.from_commit }}
          TO_COMMIT: ${{ steps.commit_range.outputs.to_commit }}
          DOCS_PATH: "../docs/customer"
          AI_MODEL: "openai/gpt-oss-20b:free"
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "📝 Generating CUSTOMER documentation..."
          npm run docs:generate

      # 10. Aggiorna tracking file
      - name: 💾 Update Documentation Tracking
        if: steps.check_needed.outputs.needed == 'true'
        run: |
          TRACKING_FILE=".docs-tracking.json"
          TO_COMMIT="${{ steps.commit_range.outputs.to_commit }}"

          # Crea o aggiorna tracking file
          cat > $TRACKING_FILE <<EOF
          {
            "last_documented_commit": "$TO_COMMIT",
            "last_documented_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "documented_by_workflow": "${{ github.run_id }}",
            "commit_range": {
              "from": "${{ steps.commit_range.outputs.from_commit }}",
              "to": "$TO_COMMIT",
              "count": ${{ steps.commit_range.outputs.commit_count }}
            },
            "audiences": ["${{ inputs.audience }}"]
          }
          EOF

          echo "✅ Updated tracking file:"
          cat $TRACKING_FILE

          # Commit tracking file
          git add $TRACKING_FILE

      # 11. Commit tutte le modifiche
      - name: 💾 Commit Documentation Changes
        id: commit_docs
        if: steps.check_needed.outputs.needed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Aggiungi tutte le modifiche docs
          git add docs/
          git add .docs-tracking.json

          # Check se ci sono modifiche
          if git diff --staged --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No documentation changes to commit"
          else
            # Crea messaggio commit dettagliato
            AUDIENCE="${{ inputs.audience }}"
            COMMIT_COUNT="${{ steps.commit_range.outputs.commit_count }}"
            
            git commit -m "docs: update ${AUDIENCE} documentation

          Updated documentation for ${AUDIENCE} audience.

          Commits analyzed: ${COMMIT_COUNT}
          Range: ${{ steps.commit_range.outputs.from_commit }}...${{ steps.commit_range.outputs.to_commit }}

          Changes:
          ${{ steps.commits.outputs.stats }}

          Generated by workflow: ${{ github.run_id }}
          Triggered by: @${{ github.actor }}"
            
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Changes committed"
          fi

      # 12. Crea Pull Request
      - name: 📤 Create Documentation Pull Request
        if: steps.commit_docs.outputs.has_changes == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: docs/update-${{ inputs.audience }}-${{ github.run_number }}
          delete-branch: true
          base: main

          title: "📚 [Docs] Update ${{ inputs.audience }} documentation"

          body: |
            ## 📚 Documentazione Aggiornata - ${{ inputs.audience }}

            Questa PR contiene gli aggiornamenti alla documentazione generati automaticamente.

            ### 📊 Informazioni

            - **Audience**: `${{ inputs.audience }}`
            - **Commit analizzati**: ${{ steps.commit_range.outputs.commit_count }}
            - **Range**: `${{ steps.commit_range.outputs.from_commit }}...${{ steps.commit_range.outputs.to_commit }}`
            - **Triggered by**: @${{ github.actor }}
            - **Workflow run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### 📈 Statistiche Modifiche

            ```
            ${{ steps.commits.outputs.stats }}
            ```

            ### 📝 Commit Analizzati

            <details>
            <summary>Vedi lista completa commit</summary>

            ```
            $(git log --pretty=format:"%h - %s (%an)" ${{ steps.commit_range.outputs.from_commit }}..${{ steps.commit_range.outputs.to_commit }})
            ```

            </details>

            ### 🎯 Documentazione Generata

            ${{ inputs.audience == 'all' && '- ✅ Developer (tecnica)' || '' }}
            ${{ inputs.audience == 'all' && '- ✅ Stakeholder (business)' || '' }}
            ${{ inputs.audience == 'all' && '- ✅ Customer (user guide)' || '' }}
            ${{ inputs.audience == 'developer' && '- ✅ Developer (tecnica)' || '' }}
            ${{ inputs.audience == 'stakeholder' && '- ✅ Stakeholder (business)' || '' }}
            ${{ inputs.audience == 'customer' && '- ✅ Customer (user guide)' || '' }}

            ### ✅ Checklist Review

            - [ ] La documentazione è accurata e completa
            - [ ] Il tono è appropriato per l'audience
            - [ ] Gli esempi sono corretti e funzionanti
            - [ ] Non ci sono informazioni sensibili
            - [ ] I link funzionano correttamente

            ### 📍 Prossimo Aggiornamento

            Il prossimo aggiornamento della documentazione partirà dal commit:
            ```
            ${{ steps.commit_range.outputs.to_commit }}
            ```

            ---

            <sub>🤖 Generato automaticamente da [Multi-Audience Docs Framework]</sub>

          labels: |
            documentation
            automated
            ${{ inputs.audience }}

          assignees: ${{ github.actor }}

      # 13. Genera summary del workflow
      - name: 📊 Workflow Summary
        if: always()
        run: |
          echo "# 📚 Documentation Generation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check_needed.outputs.needed }}" = "false" ]; then
            echo "## ℹ️ No Documentation Generated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Motivo: ${{ steps.check_needed.outputs.needed == 'false' && 'No relevant changes detected' || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Documentation Generated Successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Statistics" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Audience**: \`${{ inputs.audience }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Commits Analyzed**: ${{ steps.commit_range.outputs.commit_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit Range**: \`${{ steps.commit_range.outputs.from_commit }}...${{ steps.commit_range.outputs.to_commit }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **PR Created**: #${{ steps.create_pr.outputs.pull-request-number }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📝 Changes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.commits.outputs.stats }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: [\`${{ github.run_id }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      # 14. Upload artifacts per debug
      - name: 📦 Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-generation-logs
          path: |
            scripts/*.log
            scripts/metrics.jsonl
            .docs-tracking.json
            /tmp/commits.txt
          retention-days: 30
          if-no-files-found: ignore
