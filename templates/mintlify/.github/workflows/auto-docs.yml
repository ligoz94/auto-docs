name: 📚 Auto Documentation with OpenRouter

# Trigger quando viene aperta/aggiornata una PR
on:
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]
    paths:
      # File che triggerano la documentazione
      - "**.ts"
      - "**.tsx"
      - "**.js"
      - "**.jsx"
      - "**.py"
      - "**.go"
      - "**.java"
      - "**.rs"
      - "**.rb"
      - "**.php"

      # IMPORTANTE: Escludi docs/ per evitare loop infiniti
      - "!docs/**"
      - "!.github/**"
      - "!node_modules/**"
      - "!dist/**"
      - "!build/**"
      - "!coverage/**"
      - "**/*.test.*"
      - "**/*.spec.*"

# Permessi necessari per il workflow
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  update-documentation:
    name: 🤖 Update Documentation
    runs-on: ubuntu-latest

    # Skip se la PR è già di documentazione
    if: "!contains(github.event.pull_request.title, '[Auto]') && !contains(github.event.pull_request.labels.*.name, 'documentation')"

    steps:
      # 1. Checkout del repository con storia completa
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessario per git diff
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Setup Node.js
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "scripts/package-lock.json"

      # 3. Installa dipendenze degli script
      - name: 📦 Install Script Dependencies
        working-directory: ./scripts
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      # 4. Fetch del branch base per confronto
      - name: 🔄 Fetch Base Branch
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
          echo "Base branch fetched: origin/${{ github.event.pull_request.base.ref }}"

      # 5. Lista file modificati per debug
      - name: 🔍 List Changed Files
        id: changed_files
        run: |
          echo "Files changed in this PR:"
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD

          # Salva lista per uso successivo
          FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -v '^docs/' | tr '\n' ',' || true)
          echo "files=$FILES" >> $GITHUB_OUTPUT

      # 6. Esegui lo script di documentazione
      - name: 🤖 Run Documentation Agent
        id: run_agent
        working-directory: ./scripts
        env:
          # API Keys
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

          # Configurazione
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
          DOCS_PATH: "../docs"
          AI_MODEL: "openai/gpt-oss-20b:free"
          TEMPERATURE: "0.3"
          MAX_TOKENS: "4000"

          # Context GitHub
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_PR_TITLE: ${{ github.event.pull_request.title }}
          GITHUB_PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          GITHUB_OUTPUT: ${{ github.output }}
        run: |
          echo "🚀 Starting documentation agent..."
          npm run docs:update || {
            echo "❌ Documentation agent failed"
            exit 1
          }
          echo "✅ Documentation agent completed"
        continue-on-error: false

      # 7. Check se ci sono modifiche alla documentazione
      - name: 📊 Check Documentation Changes
        id: check_changes
        run: |
          if [[ -n $(git status -s docs/) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Documentation changes detected"
            
            # Count modifiche
            ADDED=$(git diff --cached --numstat docs/ | awk '{sum+=$1} END {print sum}')
            REMOVED=$(git diff --cached --numstat docs/ | awk '{sum+=$2} END {print sum}')
            FILES_CHANGED=$(git diff --cached --name-only docs/ | wc -l)
            
            echo "added_lines=$ADDED" >> $GITHUB_OUTPUT
            echo "removed_lines=$REMOVED" >> $GITHUB_OUTPUT
            echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No documentation changes needed"
          fi

      # 8. Commit modifiche documentazione
      - name: 💾 Commit Documentation Changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add docs/

          git commit -m "docs: auto-update from PR #${{ github.event.pull_request.number }}

          This commit was automatically generated by the documentation agent.

          Changes:
          - Files modified: ${{ steps.check_changes.outputs.files_changed }}
          - Lines added: ${{ steps.check_changes.outputs.added_lines }}
          - Lines removed: ${{ steps.check_changes.outputs.removed_lines }}

          Source PR: #${{ github.event.pull_request.number }}
          Author: @${{ github.event.pull_request.user.login }}

          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      # 9. Crea PR separata per documentazione
      - name: 📤 Create Documentation Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: docs/auto-pr-${{ github.event.pull_request.number }}
          delete-branch: true
          base: ${{ github.event.pull_request.base.ref }}

          title: "📚 [Auto] Documentation for PR #${{ github.event.pull_request.number }}"

          body: |
            ## 🤖 Documentazione Automatica

            Questa PR è stata generata automaticamente dall'AI Documentation Agent.

            ### 📋 Informazioni

            - **PR Origine**: #${{ github.event.pull_request.number }} - "${{ github.event.pull_request.title }}"
            - **Autore**: @${{ github.event.pull_request.user.login }}
            - **Branch**: `${{ github.event.pull_request.head.ref }}`
            - **Base**: `${{ github.event.pull_request.base.ref }}`
            - **Commit**: `${{ github.event.pull_request.head.sha }}`

            ### 📊 Statistiche

            - **File modificati**: ${{ steps.check_changes.outputs.files_changed }}
            - **Righe aggiunte**: +${{ steps.check_changes.outputs.added_lines }}
            - **Righe rimosse**: -${{ steps.check_changes.outputs.removed_lines }}

            ### 📝 File originali modificati

            ```
            ${{ steps.changed_files.outputs.files }}
            ```

            ### ✅ Checklist Review

            Prima di mergiare questa PR, verifica:

            - [ ] La documentazione è accurata e aggiornata
            - [ ] Gli esempi di codice funzionano correttamente
            - [ ] Non ci sono informazioni sensibili o errate
            - [ ] Lo stile è consistente con il resto della documentazione
            - [ ] I link interni/esterni funzionano
            - [ ] Il frontmatter YAML è corretto

            ### 🔗 Links

            - [Visualizza documentazione locale](https://github.com/${{ github.repository }}/blob/docs/auto-pr-${{ github.event.pull_request.number }}/docs)
            - [PR originale](#${{ github.event.pull_request.number }})

            ---

            <sub>🤖 Generato automaticamente da [Auto-Docs Framework](https://github.com/tuo-username/auto-docs-framework)</sub>
            <sub>💡 Powered by OpenRouter + Mintlify</sub>

          labels: |
            documentation
            automated
            ai-generated

          assignees: ${{ github.event.pull_request.user.login }}

          reviewers: ${{ github.event.pull_request.user.login }}

      # 10. Commenta sulla PR originale
      - name: 💬 Comment on Original PR
        if: steps.check_changes.outputs.has_changes == 'true' && steps.create_pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.create_pr.outputs.pull-request-number }}';
            const changedFiles = '${{ steps.check_changes.outputs.files_changed }}';

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📚 Documentazione Aggiornata Automaticamente!
              
              Ho generato una PR con la documentazione aggiornata per le tue modifiche.
              
              **📊 Statistiche:**
              - ${changedFiles} file di documentazione modificati
              - +${{ steps.check_changes.outputs.added_lines }} / -${{ steps.check_changes.outputs.removed_lines }} righe
              
              **🔗 PR Documentazione:** #${prNumber}
              
              Per favore, reviewla prima di procedere con il merge! 🙏
              
              ---
              <sub>🤖 Generato da AI Documentation Agent</sub>`
            });

      # 11. Label PR originale
      - name: 🏷️ Add Label to Original PR
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['has-documentation']
            });

      # 12. Notifica se nessuna modifica
      - name: ℹ️ No Changes Comment
        if: steps.check_changes.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ℹ️ Documentazione già aggiornata
              
              L'AI Documentation Agent ha analizzato le tue modifiche e ha determinato che la documentazione esistente è già adeguata.
              
              Nessuna modifica necessaria! ✅
              
              ---
              <sub>🤖 Analisi completata automaticamente</sub>`
            });

      # 13. Summary del workflow
      - name: 📝 Job Summary
        if: always()
        run: |
          echo "# 🤖 Auto Documentation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Number**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Title**: ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Branch**: ${{ github.event.pull_request.base.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "## ✅ Documentation Updated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Files Changed**: ${{ steps.check_changes.outputs.files_changed }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Lines Added**: +${{ steps.check_changes.outputs.added_lines }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Lines Removed**: -${{ steps.check_changes.outputs.removed_lines }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Documentation PR**: #${{ steps.create_pr.outputs.pull-request-number }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ℹ️ No Documentation Changes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The documentation is already up to date." >> $GITHUB_STEP_SUMMARY
          fi

      # 14. Upload logs come artifact (per debugging)
      - name: 📦 Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-agent-logs-${{ github.run_number }}
          path: |
            scripts/*.log
            scripts/metrics.jsonl
          retention-days: 7
          if-no-files-found: ignore

  # Job separato per metriche (opzionale)
  metrics:
    name: 📊 Collect Metrics
    runs-on: ubuntu-latest
    needs: update-documentation
    if: always()

    steps:
      - name: 📈 Send Metrics
        run: |
          # Qui puoi inviare metriche a servizi esterni
          # Es: DataDog, CloudWatch, Grafana, etc.
          echo "Sending metrics..."

          # Esempio con webhook
          # curl -X POST ${{ secrets.METRICS_WEBHOOK_URL }} \
          #   -H 'Content-Type: application/json' \
          #   -d '{
          #     "workflow": "auto-docs",
          #     "pr": "${{ github.event.pull_request.number }}",
          #     "status": "${{ needs.update-documentation.result }}",
          #     "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
          #   }'
